# -*- coding: utf-8 -*-
# Problem 44
# Pentagon numbers

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
# pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
# 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
# difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
# of D?

from time import time
from itertools import permutations

start_time = time()

p_list = dict.fromkeys([n*(3*n-1)/2 for n in range(1, 10000)], 1)

l = []
for e in permutations(p_list, 2):
    if e[1] < e[0]:
        continue
    sum_ = e[0] + e[1]
    if not sum_ in p_list:
        continue
    diff = abs(e[0] - e[1])
    if not diff in p_list:
        continue
    l.append(e)

print l


print "Total Time: ", time() - start_time

# Completed on Wed, 5 Mar 2014, 04:50
# Solve by: 27131
# ---------------
# [(1560090, 7042750)]
# Total Time:  37.9790000916
# [Finished in 38.1s]

# print 1560090-7042750
# -5482660

# *******************************************************
# **********NEED ANOTHER ALGORITHM***********************
# *******************************************************
"""
from time import time
start_time = time()
def pent():
   i = 1
   while True:
      yield i * (3*i-1) / 2
      i+=1
pgen=pent()
pset = set()
found = False
while not found:
   p = pgen.next()
   for i in pset:
      if i!=p-i and p-i in pset and p-i-i in pset:
         found = True
         print "found it ", p-i, "+", i, "=", p
         print "found it ", p-i, "-", i, "=", p-i-i
         break
   pset.add(p)
print 'finished in ' + str(time() - start_time)
"""